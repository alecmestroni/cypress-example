"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtCredentials = exports.PatCredentials = exports.BasicAuthCredentials = void 0;
const base64_1 = require("../../util/base64");
const dedent_1 = require("../../util/dedent");
const errors_1 = require("../../util/errors");
const logging_1 = require("../../util/logging");
/**
 * A basic authorization credentials class, storing base64 encoded credentials of usernames and
 * passwords.
 */
class BasicAuthCredentials {
    encodedCredentials;
    /**
     * Constructs new basic authorization credentials.
     *
     * @param username - the username
     * @param password - the password
     */
    constructor(username, password) {
        // See: https://developer.atlassian.com/server/jira/platform/basic-authentication/#construct-the-authorization-header
        this.encodedCredentials = (0, base64_1.encode)(`${username}:${password}`);
    }
    getAuthorizationHeader() {
        return {
            ["Authorization"]: `Basic ${this.encodedCredentials}`,
        };
    }
}
exports.BasicAuthCredentials = BasicAuthCredentials;
/**
 * A personal access token (_PAT_) credentials class, storing a secret token to use during HTTP
 * authorization.
 */
class PatCredentials {
    token;
    /**
     * Constructs new PAT credentials from the provided token.
     *
     * @param token - the token
     */
    constructor(token) {
        this.token = token;
    }
    getAuthorizationHeader() {
        return {
            ["Authorization"]: `Bearer ${this.token}`,
        };
    }
}
exports.PatCredentials = PatCredentials;
/**
 * A JWT credentials class, storing a JWT token to use during HTTP authorization. The class is
 * designed to retrieve fresh JWT tokens from an authentication URL/endpoint. Once retrieved, the
 * token will be stored and reused whenever necessary.
 */
class JwtCredentials {
    token;
    clientId;
    clientSecret;
    authenticationUrl;
    httpClient;
    /**
     * Constructs new JWT credentials. The client ID and client secret will be used to retrieve a
     * JWT token from the authentication URL on demand.
     *
     * @param clientId - the client ID
     * @param clientSecret - the client secret
     * @param authenticationUrl - the authentication URL/token endpoint
     * @param httpClient - the HTTP client to use for fetching the token
     */
    constructor(clientId, clientSecret, authenticationUrl, httpClient) {
        this.token = undefined;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.authenticationUrl = authenticationUrl;
        this.httpClient = httpClient;
    }
    /**
     * Return the URL to authenticate to.
     *
     * @returns the URL
     */
    getAuthenticationUrl() {
        return this.authenticationUrl;
    }
    async getAuthorizationHeader() {
        if (!this.token) {
            this.token = this.fetchToken();
        }
        return {
            ["Authorization"]: `Bearer ${await this.token}`,
        };
    }
    async fetchToken() {
        try {
            logging_1.LOG.message(logging_1.Level.INFO, `Authenticating to: ${this.authenticationUrl}...`);
            const response = await this.httpClient.post(this.authenticationUrl, {
                ["client_id"]: this.clientId,
                ["client_secret"]: this.clientSecret,
            });
            // A JWT token is expected: https://stackoverflow.com/a/74325712
            const jwtRegex = /^[A-Za-z0-9_-]{2,}(?:\.[A-Za-z0-9_-]{2,}){2}$/;
            if (jwtRegex.test(response.data)) {
                logging_1.LOG.message(logging_1.Level.DEBUG, "Authentication successful");
                return response.data;
            }
            else {
                throw new Error("Expected to receive a JWT token, but did not");
            }
        }
        catch (error) {
            logging_1.LOG.message(logging_1.Level.ERROR, (0, dedent_1.dedent)(`
                    Failed to authenticate to: ${this.authenticationUrl}

                      Caused by: ${(0, errors_1.errorMessage)(error)}
                `));
            logging_1.LOG.logErrorToFile(error, "authentication");
            throw new errors_1.LoggedError("Authentication failed");
        }
    }
}
exports.JwtCredentials = JwtCredentials;
