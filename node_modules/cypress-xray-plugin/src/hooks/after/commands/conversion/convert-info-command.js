"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvertInfoCloudCommand = exports.ConvertInfoServerCommand = exports.ConvertInfoCommand = void 0;
const command_1 = require("../../../command");
const multipart_info_1 = require("./util/multipart-info");
class ConvertInfoCommand extends command_1.Command {
    testExecutionIssueType;
    runInformation;
    info;
    constructor(parameters, logger, testExecutionIssueType, runInformation, info) {
        super(parameters, logger);
        this.info = info;
        this.testExecutionIssueType = testExecutionIssueType;
        this.runInformation = runInformation;
    }
    async computeResult() {
        const testExecutionIssueType = await this.testExecutionIssueType.compute();
        const runInformation = await this.runInformation.compute();
        const custom = await this.info?.custom?.compute();
        const summary = await this.info?.summary?.compute();
        const testExecutionIssueData = {
            custom: custom,
            description: this.parameters.jira.testExecutionIssueDescription,
            issuetype: testExecutionIssueType,
            projectKey: this.parameters.jira.projectKey,
            summary: summary,
        };
        return await this.buildInfo(runInformation, testExecutionIssueData);
    }
}
exports.ConvertInfoCommand = ConvertInfoCommand;
class ConvertInfoServerCommand extends ConvertInfoCommand {
    testEnvironmentsId;
    testPlanId;
    constructor(...[options, logger, testExecutionIssueType, runInformation, info]) {
        super(options, logger, testExecutionIssueType, runInformation, info);
        if (this.parameters.jira.testPlanIssueKey && !info?.fieldIds?.testPlanId) {
            throw new Error("A test plan issue key was supplied without the test plan Jira field ID");
        }
        if (this.parameters.xray.testEnvironments && !info?.fieldIds?.testEnvironmentsId) {
            throw new Error("Test environments were supplied without the test environments Jira field ID");
        }
        this.testEnvironmentsId = info?.fieldIds?.testEnvironmentsId;
        this.testPlanId = info?.fieldIds?.testPlanId;
    }
    async buildInfo(runInformation, testExecutionIssueData) {
        if (this.parameters.jira.testPlanIssueKey && this.testPlanId) {
            const testPlandId = await this.testPlanId.compute();
            testExecutionIssueData.testPlan = {
                fieldId: testPlandId,
                value: this.parameters.jira.testPlanIssueKey,
            };
        }
        if (this.parameters.xray.testEnvironments && this.testEnvironmentsId) {
            const testEnvironmentsId = await this.testEnvironmentsId.compute();
            testExecutionIssueData.testEnvironments = {
                fieldId: testEnvironmentsId,
                value: this.parameters.xray.testEnvironments,
            };
        }
        return (0, multipart_info_1.buildMultipartInfoServer)(runInformation, testExecutionIssueData);
    }
}
exports.ConvertInfoServerCommand = ConvertInfoServerCommand;
class ConvertInfoCloudCommand extends ConvertInfoCommand {
    buildInfo(runInformation, testExecutionIssueData) {
        if (this.parameters.jira.testPlanIssueKey) {
            testExecutionIssueData.testPlan = {
                value: this.parameters.jira.testPlanIssueKey,
            };
        }
        if (this.parameters.xray.testEnvironments) {
            testExecutionIssueData.testEnvironments = {
                value: this.parameters.xray.testEnvironments,
            };
        }
        return (0, multipart_info_1.buildMultipartInfoCloud)(runInformation, testExecutionIssueData);
    }
}
exports.ConvertInfoCloudCommand = ConvertInfoCloudCommand;
