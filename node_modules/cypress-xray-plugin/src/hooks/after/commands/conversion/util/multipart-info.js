"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMultipartInfoServer = buildMultipartInfoServer;
exports.buildMultipartInfoCloud = buildMultipartInfoCloud;
const dedent_1 = require("../../../../../util/dedent");
/**
 * Converts Cypress run data into Cucumber multipart information, which could be used when creating
 * new test executions on import or when updating existing ones.
 *
 * @param runData - Cypress run data
 * @param testExecutionIssueData - additional information to consider
 * @returns the Cucumber multipart information data for Xray server
 */
function buildMultipartInfoServer(runData, testExecutionIssueData) {
    const multipartInfo = getBaseInfo(runData, testExecutionIssueData);
    if (testExecutionIssueData.testPlan) {
        multipartInfo.fields[testExecutionIssueData.testPlan.fieldId] = [
            testExecutionIssueData.testPlan.value,
        ];
    }
    if (testExecutionIssueData.testEnvironments) {
        multipartInfo.fields[testExecutionIssueData.testEnvironments.fieldId] =
            testExecutionIssueData.testEnvironments.value;
    }
    if (testExecutionIssueData.custom?.fields) {
        for (const [key, value] of Object.entries(testExecutionIssueData.custom.fields)) {
            multipartInfo.fields[key] = value;
        }
    }
    return multipartInfo;
}
/**
 * Converts Cypress run data into Cucumber multipart information, which could be used when creating
 * new test executions on import or when updating existing ones.
 *
 * @param runData - Cypress run data
 * @param testExecutionIssueData - additional information to consider
 * @returns the Cucumber multipart information data for Xray cloud
 */
function buildMultipartInfoCloud(runData, testExecutionIssueData) {
    const multipartInfo = {
        ...getBaseInfo(runData, testExecutionIssueData),
        xrayFields: {
            environments: testExecutionIssueData.testEnvironments?.value,
            testPlanKey: testExecutionIssueData.testPlan?.value,
        },
    };
    if (testExecutionIssueData.custom?.fields) {
        for (const [key, value] of Object.entries(testExecutionIssueData.custom.fields)) {
            multipartInfo.fields[key] = value;
        }
    }
    return multipartInfo;
}
function getBaseInfo(runData, testExecutionIssueData) {
    return {
        fields: {
            description: testExecutionIssueData.description ??
                defaultDescription(runData.cypressVersion, runData.browserName, runData.browserVersion),
            issuetype: testExecutionIssueData.issuetype ?? {
                name: "Test Execution",
            },
            project: {
                key: testExecutionIssueData.projectKey,
            },
            summary: testExecutionIssueData.summary ??
                defaultSummary(new Date(runData.startedTestsAt).getTime()),
        },
        historyMetadata: testExecutionIssueData.custom?.historyMetadata,
        properties: testExecutionIssueData.custom?.properties,
        transition: testExecutionIssueData.custom?.transition,
        update: testExecutionIssueData.custom?.update,
    };
}
function defaultSummary(timestamp) {
    return `Execution Results [${timestamp.toString()}]`;
}
function defaultDescription(cypressVersion, browserName, browserVersion) {
    return (0, dedent_1.dedent)(`
        Cypress version: ${cypressVersion}
        Browser: ${browserName} (${browserVersion})
    `);
}
