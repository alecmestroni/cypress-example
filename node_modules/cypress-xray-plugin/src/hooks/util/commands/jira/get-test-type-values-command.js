"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTestTypeValuesCommandCloud = exports.GetTestTypeValuesCommandServer = void 0;
const dedent_1 = require("../../../../util/dedent");
const extraction_1 = require("../../../../util/extraction");
const logging_1 = require("../../../../util/logging");
const command_1 = require("../../../command");
const get_field_values_command_1 = require("./get-field-values-command");
class GetTestTypeValuesCommandServer extends get_field_values_command_1.GetFieldValuesCommand {
    async computeResult() {
        // Field property example:
        // customfield_12100: {
        //   value: "Cucumber",
        //   id: "12702",
        //   disabled: false
        // }
        return await this.extractJiraFieldValues((issue, fieldId) => (0, extraction_1.extractNestedString)(issue.fields, [fieldId, "value"]));
    }
}
exports.GetTestTypeValuesCommandServer = GetTestTypeValuesCommandServer;
class GetTestTypeValuesCommandCloud extends command_1.Command {
    issueKeys;
    constructor(parameters, logger, issueKeys) {
        super(parameters, logger);
        this.issueKeys = issueKeys;
    }
    async computeResult() {
        const issueKeys = await this.issueKeys.compute();
        const testTypes = await this.parameters.xrayClient.getTestTypes(this.parameters.projectKey, ...issueKeys);
        const missingTypes = issueKeys.filter((key) => !(key in testTypes));
        if (missingTypes.length > 0) {
            missingTypes.sort();
            this.logger.message(logging_1.Level.WARNING, (0, dedent_1.dedent)(`
                    Failed to retrieve test types of issues:

                      ${missingTypes.join("\n")}
                `));
        }
        return testTypes;
    }
}
exports.GetTestTypeValuesCommandCloud = GetTestTypeValuesCommandCloud;
