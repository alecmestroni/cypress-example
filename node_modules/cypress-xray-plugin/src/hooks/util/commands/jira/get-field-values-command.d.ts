import { JiraClient } from "../../../../client/jira/jira-client";
import { Issue } from "../../../../types/jira/responses/issue";
import { StringMap } from "../../../../types/util";
import { Logger } from "../../../../util/logging";
import { Command, Computable } from "../../../command";
import { JiraField } from "./extract-field-id-command";
export interface FieldValueMap {
    [JiraField.LABELS]: string[];
    [JiraField.SUMMARY]: string;
    [JiraField.TEST_TYPE]: string;
}
interface Parameters {
    jiraClient: JiraClient;
}
export declare abstract class GetFieldValuesCommand<F extends keyof FieldValueMap> extends Command<StringMap<FieldValueMap[F]>, Parameters> {
    protected readonly fieldId: Computable<string>;
    protected readonly issueKeys: Computable<string[]>;
    constructor(parameters: Parameters, logger: Logger, fieldId: Computable<string>, issueKeys: Computable<string[]>);
    protected extractJiraFieldValues(extractor: (issue: Issue, fieldId: string) => FieldValueMap[F] | Promise<FieldValueMap[F]>): Promise<StringMap<FieldValueMap[F]>>;
}
export {};
