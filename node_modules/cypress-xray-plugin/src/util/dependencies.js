"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IMPORT = void 0;
exports.importOptionalDependency = importOptionalDependency;
const logging_1 = require("./logging");
/**
 * Imports and returns an optional dependency.
 *
 * @param packageName - the dependency's package name
 * @returns the dependency
 */
async function importOptionalDependency(packageName) {
    const dependency = await (0, exports.IMPORT)(packageName);
    logging_1.LOG.message(logging_1.Level.DEBUG, `Successfully imported optional dependency: ${packageName}`);
    return dependency;
}
/**
 * Dynamically imports a package.
 *
 * *Note: This function is mainly used for stubbing purposes only, since `import` cannot be stubbed
 * as it's not a function. You should probably use safer alternatives like
 * {@link importOptionalDependency | `importOptionalDependency`}.*
 *
 * @param packageName - the name of the package to import
 * @returns the package
 */
const IMPORT = async (packageName) => {
    return (await Promise.resolve(`${packageName}`).then(s => __importStar(require(s))));
};
exports.IMPORT = IMPORT;
